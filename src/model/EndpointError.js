/**
 * Passio Food Catalog API
 * Welcome to the [Passiolife](https://www.passiolife.com) Food Catalog API.  The Passiolife Catalog API is organized around the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer)  methodology, and it uses resource-oriented URLs, and common HTTP response codes to indicate API errors.  All requests are authenticated using an `api-key` which can be obtained by signing up.  
 *
 * OpenAPI spec version: 0.2-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.PassioFoodCatalog) {
      root.PassioFoodCatalog = {};
    }
    root.PassioFoodCatalog.EndpointError = factory(root.PassioFoodCatalog.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The EndpointError model module.
   * @module model/EndpointError
   * @version 0.2-beta
   */

  /**
   * Constructs a new <code>EndpointError</code>.
   * @alias module:model/EndpointError
   * @class
   */
  var exports = function() {
    var _this = this;





  };

  /**
   * Constructs a <code>EndpointError</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EndpointError} obj Optional instance to populate.
   * @return {module:model/EndpointError} The populated <code>EndpointError</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('code')) {
        obj['code'] = ApiClient.convertToType(data['code'], 'Number');
      }
      if (data.hasOwnProperty('message')) {
        obj['message'] = ApiClient.convertToType(data['message'], 'String');
      }
      if (data.hasOwnProperty('fields')) {
        obj['fields'] = ApiClient.convertToType(data['fields'], Object);
      }
      if (data.hasOwnProperty('details')) {
        obj['details'] = ApiClient.convertToType(data['details'], Object);
      }
    }
    return obj;
  }

  /**
   * Unique code that describes the error
   * @member {Number} code
   */
  exports.prototype['code'] = undefined;
  /**
   * Human readable form
   * @member {String} message
   */
  exports.prototype['message'] = undefined;
  /**
   * Additional information
   * @member {Object} fields
   */
  exports.prototype['fields'] = undefined;
  /**
   * Additional information
   * @member {Object} details
   */
  exports.prototype['details'] = undefined;



  return exports;
}));


